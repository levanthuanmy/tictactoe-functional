{"version":3,"sources":["components/Square.jsx","components/Board.jsx","index.js"],"names":["Square","styleSquare","onClick","value","className","Board","map","squares","i","j","Game","useState","size","setSize","setMap","Array","fill","lastMove","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","setStyleSquare","isAscending","setIsAscending","status","setStatus","createMap","newSize","jumpTo","leng","resMap","row","push","onWin","winner","newStyleSquare","item","step","newHistory","slice","length","calculateWinner","useEffect","includes","items","move","desc","style","textAlign","Math","floor","concat","handleClick","ReactDOM","render","document","getElementById","numOfStreaks","winPositions","winCheck","pos","point","nextPosition"],"mappings":"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","file":"static/js/main.7b1fe047.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Square = ({ styleSquare, onClick, value }) => {\r\n  return (\r\n    <button className={styleSquare} onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Square\r\n","import React from \"react\"\r\nimport Square from \"./Square\"\r\n\r\nconst Board = ({ map, squares, onClick, styleSquare }) => {\r\n  return (\r\n    <>\r\n      {map.map((i) => (\r\n        <div key={i} className=\"board-row\">\r\n          {i.map((j) => (\r\n            <label key={j}>\r\n              <Square\r\n                value={squares[j]}\r\n                onClick={() => onClick(j)}\r\n                styleSquare={styleSquare[j]}\r\n              />\r\n            </label>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Board\r\n","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Board from './components/Board'\n\nexport const Game = () => {\n  const [size, setSize] = useState(3)\n  const [map, setMap] = useState([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\n  const [history, setHistory] = useState([\n    {\n      squares: Array(9).fill(null),\n      lastMove: null,\n    }\n  ])\n  const [stepNumber, setStepNumber] = useState(0)\n  const [xIsNext, setXIsNext] = useState(true)\n  const [styleSquare, setStyleSquare] = useState(Array(9).fill(\"square\"))\n  const [isAscending, setIsAscending] = useState(false)\n  const [status, setStatus] = useState('')\n\n  const createMap = (newSize = 3) => {\n    if (newSize < 3) return\n    jumpTo(0)\n    const leng = newSize * newSize\n    const resMap = []\n    for (let i = 0; i < leng; i++) {\n      const row = []\n      for (let j = i; j < newSize + i; j++) {\n        row.push(j)\n      }\n      resMap.push(row)\n      i += newSize - 1\n    }\n    setSize(newSize)\n    setMap(resMap)\n    setHistory([\n      {\n        squares: Array(leng).fill(null),\n        lastMove: null,\n      }\n    ])\n    setStyleSquare(Array(leng).fill(\"square\"))\n  }\n\n  const handleClick = (i) => {\n    let newHistory = history.slice(0, stepNumber + 1)\n    const current = newHistory[newHistory.length - 1]\n    const squares = current.squares.slice()\n    let newStyleSquare = styleSquare.slice()\n    const lastMove = [i % size, Math.floor(i / size)]\n\n    if (calculateWinner(size, squares) || squares[i]) {\n      return\n    }\n    squares[i] = xIsNext ? \"X\" : \"O\"\n    const winner = calculateWinner(size, squares)\n\n    setHistory(newHistory = newHistory.concat([\n      {\n        squares: squares,\n        lastMove: lastMove,\n      }\n    ]))\n    setStepNumber(newHistory.length - 1)\n    setXIsNext(!xIsNext)\n    if (winner) {\n      onWin(winner, newStyleSquare)\n    }\n  }\n\n  const onWin = (winner, newStyleSquare) => {\n    winner?.map(item => {\n      newStyleSquare[item] += \" active-square\"\n      return null\n    })\n    setStyleSquare(newStyleSquare)\n  }\n\n  const jumpTo = (step) => {\n    let newHistory = history.slice(0, step + 1)\n    const current = newHistory[newHistory.length - 1]\n    const squares = current.squares.slice()\n    let newStyleSquare = styleSquare.slice()\n    const winner = calculateWinner(size, squares)\n\n    setStepNumber(step)\n    setXIsNext((step % 2) === 0)\n\n    if (winner) {\n      onWin(winner, newStyleSquare)\n    } else {\n      setStyleSquare(Array(size * size).fill(\"square\"))\n    }\n\n  }\n\n  const moves = () => history?.map((items, move) => {\n    if (isAscending) {\n      move = history.length - 1 - move\n    }\n    const desc = move ?\n      <div style={{ textAlign: 'start' }}>\n        Go to move #{move}\n        <br />\n        X: {history[move].lastMove[0]}, Y: {history[move].lastMove[1]}\n        <br /> Player: {history[stepNumber].squares[history[move].lastMove[0] + history[move].lastMove[1] * size]}\n      </div>\n      :\n      'Go to game start'\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)} className={move === stepNumber ? \"hightlight-btn\" : ''}>{desc}</button>\n      </li>\n    )\n  })\n\n  useEffect(() => {\n    const winner = calculateWinner(size, history[stepNumber].squares)\n    if (winner) {\n      setStatus(\"Winner: \" + history[stepNumber]?.squares[winner[0]])\n    } else if (!history[stepNumber].squares.includes(null)) {\n      setStatus(\"Draw!\")\n    } else {\n      setStatus(\"Next player: \" + (xIsNext ? \"X\" : \"O\"))\n    }\n  }, [history, size, stepNumber, xIsNext])\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-info\">\n        <div className=\"status\">{status}</div>\n        <p>Current size: {size}x{size}</p>\n        <div className=\"btn-wrapper\">\n          <button onClick={() => createMap(size + 1)}>Increase the size of the board by 1 unit</button>\n          <button onClick={() => createMap(size - 1)}>Decrease the size of the board by 1 unit (min 3)</button>\n          <button onClick={() => createMap(3)}>Reset size</button>\n          <button onClick={() => setIsAscending(!isAscending)}>{isAscending ? \"Ascending Order\" : \"Descending Order\"}</button>\n        </div>\n        <ol className=\"wrapper-history\">{moves()}</ol>\n      </div>\n      <div className=\"game-board\">\n        <Board\n          map={map}\n          squares={history[stepNumber].squares}\n          onClick={i => handleClick(i)}\n          styleSquare={styleSquare}\n        />\n      </div>\n    </div>\n  )\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"))\n\nconst calculateWinner = (size = 3, squares) => {\n  const numOfStreaks = size < 5 ? 3 : 5 // board size < 5x5 => rule is 3 || 5 \n  const leng = size * size || squares.length\n  let winPositions = []\n  let winCheck = false\n\n  for (let pos = 0; pos < leng; pos++) {\n    if (!squares[pos]) {\n      continue\n    }\n    winCheck = true\n    winPositions = [pos]\n    for (let point = 1; point < numOfStreaks; point++) {\n      if (\n        pos + point * (size + 1) > leng ||\n        squares[pos] !== squares[pos + point * (size + 1)]\n      ) {\n        winCheck = false\n        break\n      }\n      winPositions.push(pos + point * (size + 1))\n    }\n    if (winCheck) return winPositions\n  }\n\n  for (let pos = 0; pos < leng; pos++) {\n    if (!squares[pos] || pos % size < (numOfStreaks - 1)) {\n      continue\n    }\n    winCheck = true\n    winPositions = [pos]\n    for (let point = 1; point < numOfStreaks; point++) {\n      let nextPosition = pos + point * (size - 1)\n      if (nextPosition < 0 || squares[pos] !== squares[nextPosition]) {\n        winCheck = false\n        break\n      }\n      winPositions.push(nextPosition)\n    }\n    if (winCheck) return winPositions\n  }\n\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size - numOfStreaks + 1; j++) {\n      const pos = i * size + j\n      if (!squares[pos]) {\n        continue\n      }\n      winCheck = true\n      winPositions = [pos]\n      for (let point = 1; point < numOfStreaks; point++) {\n        if (squares[pos] !== squares[pos + point]) {\n          winCheck = false\n          break\n        }\n        winPositions.push(pos + point)\n      }\n      if (winCheck) return winPositions\n    }\n  }\n\n  for (let j = 0; j < size - numOfStreaks + 1; j++) {\n    for (let i = 0; i < size; i++) {\n      const pos = j * size + i\n      if (!squares[pos]) {\n        continue\n      }\n      winCheck = true\n      winPositions = [pos]\n      for (let point = 1; point < numOfStreaks; point++) {\n        if (squares[pos] !== squares[pos + point * size]) {\n          winCheck = false\n          break\n        }\n        winPositions.push(pos + point * size)\n      }\n      if (winCheck) return winPositions\n    }\n  }\n\n  return null\n}\n\n"],"sourceRoot":""}